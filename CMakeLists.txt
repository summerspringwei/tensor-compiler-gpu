
set(CMAKE_CUDA_COMPILER "/usr/local/cuda-11.7/bin/nvcc")
project(tensor-compiler-gpu LANGUAGES C CXX CUDA)
cmake_minimum_required(VERSION 3.5)
include(CheckLanguage)
check_language(CUDA)
# set(CMAKE_C_COMPILER "/usr/local/cuda-10.0/bin//nvcc")
# set(CMAKE_CXX_COMPILER "/usr/local/cuda-10.0/bin//nvcc")
set(CMAKE_CUDA_ARCHITECTURES "80")
SET(CUDA_SEPARABLE_COMPILATION ON)

set(TORCH_HOME "/home/xiachunwei/Software/pytf2.4/lib/python3.7/site-packages/torch" CACHE STRING "Set pytorch path")
message(${TORCH_HOME})
include_directories("/usr/local/cuda-11.7/include")
include_directories("/usr/local/cuda-11.7/targets/x86_64-linux/include")
# link_directories("/usr/local/cuda-11.7/lib64" "/usr/local/cudnn-11.2/lib64")
include_directories("/usr/local/cudnn-11.2/include")
include_directories("${TORCH_HOME}/include")
link_directories("/usr/local/cudnn-11.2/lib64")
link_directories("${TORCH_HOME}/lib")


include_directories("${TORCH_HOME}/include/" "${TORCH_HOME}/include/torch/csrc/api/include")
link_directories("${TORCH_HOME}/lib/")
# if(${CMAKE_BUILD_TYPE} EQUAL "Debug")
#   message(INFO "Build with debug option")
#   add_compile_options("-g -G -O0")
# endif()
# set(CUDA_NVCC_FLAGS "${CUDA_NVCC_FLAGS};-G;")

SET(CUTLASS_HOME "/home2/xiachunwei/Software/cutlass/")
include_directories("third_party/libnpy/include")
include_directories("${CUTLASS_HOME}/include" "${CUTLASS_HOME}/tools/util/include/" "${CUTLASS_HOME}/examples/common/")
link_directories("${CUTLASS_HOME}/build/tools/library")
# add_compile_options(-fno-stack-protector)

# add_executable(tmp src/learn_cuda/tmp.cu)
# add_executable(opt_conv_tensorcore src/learn_cuda/opt_conv_tensorcore.cu)
# add_executable(opt_matmul_tensorcore src/learn_cuda/opt_matmul_tensorcore.cu)

add_executable(reduce_using_reg src/learn_cuda/reduce_using_reg.cu)
add_executable(add src/learn_cuda/Add.cu)
add_executable(reduce src/learn_cuda/Reduce.cu)
add_executable(normalize src/learn_cuda/normalize.cu)
add_executable(sobel src/learn_cuda/sobel.cu)
add_executable(cudnn_conv src/learn_cuda/cudnn_conv.cu)
add_executable(pointwise_conv src/learn_cuda/pointwise_conv.cu)
add_executable(learn_shuffle src/learn_cuda/learn_shuffle.cu)
# file(GLOB FUSE_SRC_FILES src/operator_fusion/efficientnet/*.cu)
set(EFFICIENT_NET_PATH "src/operator_fusion/efficientnet/")
add_executable(fused_pointwise_pointwise_main ${EFFICIENT_NET_PATH}/fused_pointwise_pointwise_main.cu)
add_executable(fused_pointwise_depthwise_main ${EFFICIENT_NET_PATH}/fused_pointwise_depthwise_main.cu)
add_executable(fused_micro_operators_main ${EFFICIENT_NET_PATH}/fused_micro_operators_main.cu)
add_executable(cudnn_infer_ops src/operator_fusion/transformer/cudnn_infer_ops.cu)
add_executable(swin_transformer_mlp src/operator_fusion/transformer/swin_transformer_mlp_main.cu)
add_executable(gemm_spy src/operator_fusion/transformer/gemm_spy.cu)
add_executable(nerf src/operator_fusion/nerf/nerf.cu)
add_executable(tvm_nerf src/operator_fusion/nerf/tvm_nerf.cu)
add_executable(cutlass_nerf src/operator_fusion/nerf/cutlass_nerf.cu)
add_executable(bert_feed_forward src/operator_fusion/bert/bert_feed_forward.cu)
add_executable(bert_query_key src/operator_fusion/bert/bert_query_key.cu)
add_executable(torch_bert_attn src/operator_fusion/bert/torch_bert_attn.cu)

target_link_libraries(cutlass_nerf cutlass)
# add_executable(fused_pointwise_pointwise_conv src/operator_fusion/efficientnet/fused_pointwise_pointwise_main.cu src/operator_fusion/efficientnet/pointwise_112_112_144_6.cu)
# add_executable(fused_pointwise_pointwise_conv ${FUSE_SRC_FILES})
# add_executable(tvmgen src/tvm_codegen/fused_matmul_main.cu src/tvm_codegen/block_fuse_d2l_matmul_kernel0 /tmp/mmult_kernel0.cu)

add_executable(lstm_main src/operator_fusion/lstm/lstm_main.cu)
# add_executable(lstm_wavefront_timesteps src/operator_fusion/lstm/lstm_wavefront_timesteps.cu) 
add_executable(seq2seq src/operator_fusion/lstm/seq2seq.cu)
add_executable(lstm_cpu src/operator_fusion/lstm/lstm_cpu.cpp)
add_executable(test_atomic_add src/block_sync/test_atomic_add.cu)
add_executable(cu_fused_pw_dw_conv src/operator_fusion/fused_depthwise_pointwise_conv.cu)
add_executable(transformer_query_key_softmax_main src/operator_fusion/transformer/transformer_query_key_softmax_main.cu)
add_executable(swin_transformer_query_key_softmax_main src/operator_fusion/transformer/swin_transformer_query_key_softmax_main.cu)

# set_target_properties(lstm_wavefront_magic PROPERTIES CUDA_ARCHITECTURES "70;75;80")
target_link_libraries(cudnn_conv cudnn)
target_link_libraries(cudnn_infer_ops cudnn cuda cublas)
target_link_libraries(tvm_nerf cudnn cuda cublas)

set(CMAKE_CUDA_FLAGS_DEBUG "-g -G -gencode  arch=compute_80,code=sm_80")
set_target_properties(torch_bert_attn PROPERTIES CUDA_SEPARABLE_COMPILATION ON)
# target_compile_options(torch_bert_attn PRIVATE "$<$<AND:$<CONFIG:Debug>,$<COMPILE_LANGUAGE:CUDA>>:-G;-src-in-ptx>")

if(${CMAKE_BUILD_TYPE} STREQUAL "Debug")
  set(CUDA_OPT "-D_GLIBCXX_USE_CXX11_ABI=0 -g -G -O0")
else()
  set(CUDA_OPT "-D_GLIBCXX_USE_CXX11_ABI=0 -O2")
endif()
message("Build torch_bert_attn with debug option ${CUDA_OPT}")
target_compile_options(torch_bert_attn PUBLIC ${CUDA_OPT})
target_link_libraries(torch_bert_attn torch torch_cuda c10 c10_cuda torch_python torch_cuda_cu torch_cpu)
