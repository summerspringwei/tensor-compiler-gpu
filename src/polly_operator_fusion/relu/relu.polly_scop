Printing analysis 'Basic Alias Analysis (stateless AA impl)' for function 'relu':
Pass::print not implemented for pass: 'Basic Alias Analysis (stateless AA impl)'!
Printing analysis 'Polly - Create polyhedral description of Scops' for region: '%3 => %10' in function 'relu':
Invalid Scop!
Printing analysis 'Polly - Create polyhedral description of Scops' for region: '%3 => %11' in function 'relu':
    Function: relu
    Region: %3---%11
    Max Loop Depth:  1
    Invariant Accesses: {
    }
    Context:
    {  :  }
    Assumed Context:
    {  :  }
    Invalid Context:
    {  : false }
    Arrays {
        float MemRef0[*]; // Element size 4
        float MemRef_storemerge__phi; // Element size 4
        float MemRef2[*]; // Element size 4
    }
    Arrays (Bounds as pw_affs) {
        float MemRef0[*]; // Element size 4
        float MemRef_storemerge__phi; // Element size 4
        float MemRef2[*]; // Element size 4
    }
    Alias Groups (1):
        [[ <{ MemRef0[(0)] }, { MemRef0[(256)] }> <{ MemRef2[(0)] }, { MemRef2[(256)] }> ]]
Statements {
    Stmt_%3__TO__%10
        Domain :=
            { Stmt_%3__TO__%10[i0] : 0 <= i0 <= 255 };
        Schedule :=
            { Stmt_%3__TO__%10[i0] -> [i0, 0] };
        ReadAccess :=	[Reduction Type: NONE] [Scalar: 0]
            { Stmt_%3__TO__%10[i0] -> MemRef0[i0] };
        MustWriteAccess :=	[Reduction Type: NONE] [Scalar: 1]
            { Stmt_%3__TO__%10[i0] -> MemRef_storemerge__phi[] };
    Stmt1
        Domain :=
            { Stmt1[i0] : 0 <= i0 <= 255 };
        Schedule :=
            { Stmt1[i0] -> [i0, 1] };
        ReadAccess :=	[Reduction Type: NONE] [Scalar: 1]
            { Stmt1[i0] -> MemRef_storemerge__phi[] };
        MustWriteAccess :=	[Reduction Type: NONE] [Scalar: 0]
            { Stmt1[i0] -> MemRef2[i0] };
}
Printing analysis 'Polly - Create polyhedral description of Scops' for region: '%2 => <Function Return>' in function 'relu':
Invalid Scop!
