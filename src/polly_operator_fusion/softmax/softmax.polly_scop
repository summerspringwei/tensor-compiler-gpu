Printing analysis 'Basic Alias Analysis (stateless AA impl)' for function 'softmax':
Pass::print not implemented for pass: 'Basic Alias Analysis (stateless AA impl)'!
Printing analysis 'Polly - Create polyhedral description of Scops' for region: '%8 => %12' in function 'softmax':
Invalid Scop!
Printing analysis 'Polly - Create polyhedral description of Scops' for region: '%3 => .preheader' in function 'softmax':
Invalid Scop!
Printing analysis 'Polly - Create polyhedral description of Scops' for region: '%3 => %12' in function 'softmax':
    Function: softmax
    Region: %3---%12
    Max Loop Depth:  1
    Invariant Accesses: {
    }
    Context:
    {  :  }
    Assumed Context:
    {  :  }
    Invalid Context:
    {  : false }
    Arrays {
        float MemRef__024__phi; // Element size 4
        float MemRef1[*]; // Element size 4
        float MemRef2[*]; // Element size 4
        float MemRef__lcssa__phi; // Element size 4
        float MemRef__lcssa; // Element size 4
    }
    Arrays (Bounds as pw_affs) {
        float MemRef__024__phi; // Element size 4
        float MemRef1[*]; // Element size 4
        float MemRef2[*]; // Element size 4
        float MemRef__lcssa__phi; // Element size 4
        float MemRef__lcssa; // Element size 4
    }
    Alias Groups (1):
        [[ <{ MemRef1[(0)] }, { MemRef1[(256)] }> <{ MemRef2[(0)] }, { MemRef2[(256)] }> ]]
    Statements {
    	Stmt0
            Domain :=
                { Stmt0[i0] : 0 <= i0 <= 255 };
            Schedule :=
                { Stmt0[i0] -> [0, i0] };
            MustWriteAccess :=	[Reduction Type: NONE] [Scalar: 1]
                { Stmt0[i0] -> MemRef__024__phi[] };
            ReadAccess :=	[Reduction Type: NONE] [Scalar: 1]
                { Stmt0[i0] -> MemRef__024__phi[] };
            ReadAccess :=	[Reduction Type: NONE] [Scalar: 0]
                { Stmt0[i0] -> MemRef1[i0] };
            MustWriteAccess :=	[Reduction Type: NONE] [Scalar: 0]
                { Stmt0[i0] -> MemRef2[i0] };
            MustWriteAccess :=	[Reduction Type: NONE] [Scalar: 1]
                { Stmt0[i0] -> MemRef__lcssa__phi[] };
    	Stmt__preheader
            Domain :=
                { Stmt__preheader[] };
            Schedule :=
                { Stmt__preheader[] -> [1, 0] };
            ReadAccess :=	[Reduction Type: NONE] [Scalar: 1]
                { Stmt__preheader[] -> MemRef__lcssa__phi[] };
            MustWriteAccess :=	[Reduction Type: NONE] [Scalar: 1]
                { Stmt__preheader[] -> MemRef__lcssa[] };
    	Stmt2
            Domain :=
                { Stmt2[i0] : 0 <= i0 <= 255 };
            Schedule :=
                { Stmt2[i0] -> [2, i0] };
            ReadAccess :=	[Reduction Type: NONE] [Scalar: 0]
                { Stmt2[i0] -> MemRef2[i0] };
            ReadAccess :=	[Reduction Type: NONE] [Scalar: 1]
                { Stmt2[i0] -> MemRef__lcssa[] };
            MustWriteAccess :=	[Reduction Type: NONE] [Scalar: 0]
                { Stmt2[i0] -> MemRef2[i0] };
    }
Printing analysis 'Polly - Create polyhedral description of Scops' for region: '%2 => <Function Return>' in function 'softmax':
Invalid Scop!
